// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetProject.Species.Infrastructure.DbContexts;

#nullable disable

namespace PetProject.Species.Infrastructure.Migrations
{
    [DbContext(typeof(WriteSpeciesDbContext))]
    partial class WriteSpeciesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetProject.Species.Domain.PetSpecies.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "PetProject.Species.Domain.PetSpecies.Breed.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("breed", (string)null);
                });

            modelBuilder.Entity("PetProject.Species.Domain.PetSpecies.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "PetProject.Species.Domain.PetSpecies.Species.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("PetProject.Species.Domain.PetSpecies.Breed", b =>
                {
                    b.HasOne("PetProject.Species.Domain.PetSpecies.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetProject.Species.Domain.PetSpecies.Species", b =>
                {
                    b.Navigation("Breeds");
                });
#pragma warning restore 612, 618
        }
    }
}
